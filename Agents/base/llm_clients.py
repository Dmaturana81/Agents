"""Module that contains clients for LLMs"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/08_clients.ipynb.

# %% auto 0
__all__ = ['BaseClient']

# %% ../../nbs/08_clients.ipynb 3
import os
from anthropic import Anthropic
import instructor
from openai import OpenAI
import google.generativeai as genai
from groq import Groq
from pydantic import BaseModel
from typing import Literal, Any



# %% ../../nbs/08_clients.ipynb 4
genai.configure(api_key=os.environ['GEMINI_API_KEY'])

# %% ../../nbs/08_clients.ipynb 5
class BaseClient(BaseModel):
    model: str
    client: Any
    instructor_client: Any

    @classmethod
    def from_name(cls, model_name: str, client_type: Literal["ollama", "openai", "anthropic", "groq", "gemini"]):
        match client_type:
            case "ollama":
                client = OpenAI(api_key="ollama", base_url="http://localhost:11434/v1")
                instructor_client = instructor.patch(client, mode=instructor.Mode.JSON)
            case "openai":
                client = OpenAI(api_key=os.getenv("OPENAI_API_KEY", ""))
                instructor_client = instructor.from_openai(client)
            case "anthropic":
                client = Anthropic(api_key=os.getenv("ANTHROPIC_API_KEY", ""))
                instructor_client = instructor.from_anthropic(client)
            case "groq":
                client = Groq(api_key=os.getenv("GROQ_API_KEY", ""))
                instructor_client = instructor.from_groq(client)
            case "gemini":
                client = genai.GenerativeModel(
                    model_name=model_name,
                    api_key=os.getenv("GEMINI_API_KEY", ""),
                )
                instructor_client = instructor.from_gemini(client)
        return cls(model=model_name, client=client, instructor_client=instructor_client)
#| export

